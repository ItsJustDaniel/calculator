{"version":3,"sources":["App.js","components/buttons.js","components/display.js","serviceWorker.js","index.js"],"names":["App","state","input","inputArr","buttonId","buttonValue","onButtonClick","e","regex","value","target","setState","test","console","log","concat","String","eval","length","split","filter","i","join","this","slice","className","id","React","Component","Butttons","props","buttons","map","key","onClick","Display","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"88CAKMA,I,42BACJC,MAAQ,CACNC,MAAO,IACPC,SAAU,GACVC,SAAU,CACR,QACA,SACA,WACA,OACA,QACA,QACA,WACA,MACA,OACA,OACA,MACA,QACA,MACA,MACA,SACA,OACA,WAEFC,YAAa,CACX,KACA,MACA,MACA,IACA,IACA,IACA,MACA,IACA,IACA,IACA,MACA,IACA,IACA,IACA,IACA,IACA,M,MAGJC,cAAgB,SAACC,GACf,IAAMC,MAAQ,gCACRN,MAAQ,MAAKD,MAAMC,MACnBC,SAAW,MAAKF,MAAME,SACtBM,MAAQF,EAAEG,OAAOD,MAEE,MAArB,MAAKR,MAAMC,MACb,MAAKS,SAAS,CAAET,MAAOO,QACdD,MAAMI,KAAKV,MAAQO,OAC5BI,QAAQC,IAAI,SAEZ,MAAKH,SACH,CACET,MAAOA,MAAQO,MACfN,SAAUA,SAASY,OAAON,SAE5B,WACEI,QAAQC,IAAIX,aAKJ,MAAVM,MACF,MAAKE,SAAS,CACZT,MAAOc,OAAOC,KAAKf,QACnBC,SAAU,CAACa,OAAOC,KAAKf,WAEG,QAAnBK,EAAEG,OAAOD,MAClB,MAAKE,SAAS,CACZT,MAAOA,MAAQ,MACfC,SAAU,MAAKF,MAAME,SAASY,OAAO,SAEX,OAAnBR,EAAEG,OAAOD,MAClB,MAAKE,SAAS,CAAET,MAAO,IAAKC,SAAU,KAEH,QAAlCA,SAASA,SAASe,OAAS,IACQ,QAAlCf,SAASA,SAASe,OAAS,IACO,QAAlCf,SAASA,SAASe,OAAS,IACO,QAAlCf,SAASA,SAASe,OAAS,IAClB,QAAVT,OAA6B,QAAVA,OAA6B,QAAVA,OAEvC,MAAKE,SAAS,CACZT,MAAOA,MACJiB,MAAM,IACNC,QAAO,SAACC,GAEP,OADAR,QAAQC,IAAIO,GAEJ,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,GAAmB,MAANA,KAGvDC,KAAK,IACLP,OAAON,U,4PAKd,IAAMP,EAAQqB,KAAKtB,MAAMC,MACnBE,EAAWmB,KAAKtB,MAAMG,SAASoB,QAC/BnB,EAAckB,KAAKtB,MAAMI,YAAYmB,QAE3C,OACE,kEAAKC,UAAU,MAAMC,GAAG,kBACtB,kEAAKA,GAAG,cACN,2DAAC,mDAAD,CAASxB,MAAOA,IAChB,2DAAC,mDAAD,CACEO,MAAOJ,EACPqB,GAAItB,EACJE,cAAeiB,KAAKjB,sB,KA9GdqB,6CAAMC,WAsHT5B,2B,+BC3Hf,0BAqBe6B,IAlBE,SAACC,GAChB,IAAMC,EAAUD,EAAMJ,GAAGM,KAAI,SAACN,EAAIL,GAChC,OACE,4BACEK,GAAIA,EACJO,IAAKZ,EACLZ,MAAOqB,EAAMrB,MAAMY,GACnBa,QAASJ,EAAMxB,cACfmB,UAAU,WAETK,EAAMrB,MAAMY,OAKnB,OAAO,yBAAKK,GAAG,qBAAqBK,K,6BClBtC,0BAWeI,IARC,SAACL,GACf,OACE,yBAAKJ,GAAG,WACN,4BAAKI,EAAM5B,U,sMCMGkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC1C,EAAA,EAAD,MAAS2C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.6b2cd07e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Buttons from \"./components/buttons\";\nimport Display from \"./components/display\";\n\nclass App extends React.Component {\n  state = {\n    input: \"0\",\n    inputArr: [],\n    buttonId: [\n      \"clear\",\n      \"divide\",\n      \"multiply\",\n      \"nine\",\n      \"eight\",\n      \"seven\",\n      \"subtract\",\n      \"six\",\n      \"five\",\n      \"four\",\n      \"add\",\n      \"three\",\n      \"two\",\n      \"one\",\n      \"equals\",\n      \"zero\",\n      \"decimal\",\n    ],\n    buttonValue: [\n      \"AC\",\n      \" / \",\n      \" x \",\n      \"9\",\n      \"8\",\n      \"7\",\n      \" - \",\n      \"6\",\n      \"5\",\n      \"4\",\n      \" + \",\n      \"3\",\n      \"2\",\n      \"1\",\n      \"=\",\n      \"0\",\n      \".\",\n    ],\n  };\n  onButtonClick = (e) => {\n    const regex = /([.]{2,})|(?<=[.]\\d+)[.]{1,}/g;\n    const input = this.state.input;\n    const inputArr = this.state.inputArr;\n    const value = e.target.value;\n\n    if (this.state.input === \"0\") {\n      this.setState({ input: value });\n    } else if (regex.test(input + value)) {\n      console.log(\"hello\");\n    } else {\n      this.setState(\n        {\n          input: input + value,\n          inputArr: inputArr.concat(value),\n        },\n        () => {\n          console.log(inputArr);\n        }\n      );\n    }\n\n    if (value === \"=\") {\n      this.setState({\n        input: String(eval(input)),\n        inputArr: [String(eval(input))],\n      });\n    } else if (e.target.value === \" x \") {\n      this.setState({\n        input: input + \" * \",\n        inputArr: this.state.inputArr.concat(\" * \"),\n      });\n    } else if (e.target.value === \"AC\") {\n      this.setState({ input: \"0\", inputArr: [] });\n    } else if (\n      (inputArr[inputArr.length - 1] === \" + \" ||\n        inputArr[inputArr.length - 1] === \" - \" ||\n        inputArr[inputArr.length - 1] === \" / \" ||\n        inputArr[inputArr.length - 1] === \" * \") &&\n      (value === \" + \" || value === \" / \" || value === \" * \")\n    ) {\n      this.setState({\n        input: input\n          .split(\"\")\n          .filter((i) => {\n            console.log(i);\n            return (\n              i !== \"+\" && i !== \"-\" && i !== \"/\" && i !== \"*\" && i !== \" \"\n            );\n          })\n          .join(\"\")\n          .concat(value),\n      });\n    }\n  };\n  render() {\n    const input = this.state.input;\n    const buttonId = this.state.buttonId.slice();\n    const buttonValue = this.state.buttonValue.slice();\n\n    return (\n      <div className=\"App\" id=\"root-container\">\n        <div id=\"calculator\">\n          <Display input={input} />\n          <Buttons\n            value={buttonValue}\n            id={buttonId}\n            onButtonClick={this.onButtonClick}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./buttons.css\";\n\nconst Butttons = (props) => {\n  const buttons = props.id.map((id, i) => {\n    return (\n      <button\n        id={id}\n        key={i}\n        value={props.value[i]}\n        onClick={props.onButtonClick}\n        className=\"buttons\"\n      >\n        {props.value[i]}\n      </button>\n    );\n  });\n\n  return <div id=\"buttons-container\">{buttons}</div>;\n};\n\nexport default Butttons;\n","import React from \"react\";\nimport \"./display.css\";\n\nconst Display = (props) => {\n  return (\n    <div id=\"display\">\n      <h3>{props.input}</h3>\n    </div>\n  );\n};\n\nexport default Display;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}